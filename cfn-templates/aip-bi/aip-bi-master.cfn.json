{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "aip-bi-master.cfn.json",
  "Description": "Provisions two substacks: a Vpc with NAT instances, and the resources stack, which launches the BI Beanstalk app and its dependencies into the VPC.",

  "Parameters": {

    "Environment": {
      "Description": "name of the VPC Environment (dev, test, qa, prod)",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcTemplateKey": {
      "Description": "The key of the template for the VPC scaffold substack",
      "Type": "String",
      "Default": "aip-devops-REGION-ACCOUNTID/cfn-templates/aip-bi/aip-bi-vpc.cfn.json"
    },
    "ResourcesTemplateKey": {
      "Description": "The key of the template for the EB resources and application substack",
      "Type": "String",
      "Default": "aip-devops-REGION-ACCOUNTID/cfn-templates/aip-bi/aip-bi-aws-resources.cfn.json"
    },
    "DatabaseTemplateKey": {
      "Description": "The key of the template for the Database resources",
      "Type": "String",
      "Default": "aip-devops-REGION-ACCOUNTID/cfn-templates/aip-bi/aip-bi-rds.cfn.json"
    },
    "AppTemplateKey": {
      "Description": "The key of the template for that contains the EB app and env embedded in ResourcesTemplateKey",
      "Type": "String",
      "Default": "aip-devops-REGION-ACCOUNTID/cfn-templates/aip-bi/aip-bi-eb-app.cfn.json"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the Elastic Beanstalk and Bastion hosts",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcAvailabilityZone1": {
      "Description": "One of two Availability Zones that will be used to create subnets.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcAvailabilityZone2": {
      "Description": "Two of two Availability Zones that will be used to create subnets. Must be different than VpcAvailabilityZone2.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "NatInstanceType": {
      "Description": "NAT Device EC2 instance type",
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": ["t1.micro", "m3.small", "m3.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "NatImageId": {
      "Description": "NAT AMI Id",
      "Type": "String",
      "Default": "ami-c02b04a8",
      "ConstraintDescription": "must be a valid EC2 AMI Id"
    },
    "DatabaseUser": {
      "Default": "admin",
      "NoEcho": "true",
      "Type": "String",
      "Description": "Database web app account name",
      "MinLength": "1",
      "MaxLength": "16"
    },
    "DatabasePassword": {
      "Default": "0bee082a464",
      "NoEcho": "true",
      "Type": "String",
      "Description": "Database admin account password",
      "MinLength": "1",
      "MaxLength": "41"
    },
    "DatabaseName": {
      "Description": "The name of the database",
      "Type": "String",
      "Default": " postgres"
    },
    "DBAllocatedStorage": {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024Gb."
    },
    "DBInstanceClass": {
      "Description" : "The database instance type",
      "Type": "String",
      "Default": "db.m1.small",
      "AllowedValues" : [ "db.t1.micro", "db.m1.small", "db.m3.medium", "db.m3.large", "db.m3.xlarge", 
          "db.m3.2xlarge", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", 
          "db.r3.8xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.m2.8xlarge"],
      "ConstraintDescription" : "must select a valid database instance type."
    },
    "AZforReplica1": {
      "Description": "This AZ will be used to create read replica - 1",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "AZforReplica2": {
      "Description": "This AZ will be used to create read replica - 2",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "AssetsBucketPrefix": {
      "Description": "The prefix of the S3 bucket where the application WAR is located. A region-specific suffix will be appended, e.g. AssetsBucketPrefix-us-east-1.",
      "Type": "String",
      "Default" : "aip-"
    },
    "InstanceType": {
      "Description": "The type of instance to use for EB app servers",
      "Type": "String",
      "Default": "t1.micro",
      "AllowedValues": ["t1.micro", "m3.small", "m3.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"]
    },
    "ApplicationName": {
      "Description": "The name of the Elastic Beanstalk Application",
      "Type": "String",
      "Default": "aip-bi-eb-app"
    },
    "ApplicationURL": {
      "Description": "URL for Elastic BeanStalk Application. Please make sure it doesn't exist [unique]",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "ConstraintDescription":"Application URL is a mandatory parameter"
    },
    "ApplicationSourceBundle": {
      "Description": "S3 bucket name having application zip",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "S3Key": {
      "Description": "Application zip file name within ApplicationSourceBundle",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "ImageId": {
      "Description": "name of the Image (AMI Info) - aws-elasticbeanstalk-amzn-2015.03.1.x86_64-ecs-hvm-201509182207",
      "Default": "ami-7da9d918",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },  
    "CWatchLogGrpName": {
        "Description": "CloudWatch Log Group Name for BI Apps",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "255"
    },
    "CWatchLogGrpRetention": {
        "Default": "5",
        "Description": "CloudWatch Log Group Retention In Days for BI Apps",
        "Type": "Number",
        "AllowedValues": [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653],
        "ConstraintDescription": "must select a valid retention interval."
    },
    "AdminVpcId": {
      "Description": "Administration Vpc Id",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "AdminVpcCIDR": {
      "Description": "Administration Vpc CIDR block assignment",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "AdminVpcPrivateRouteTableId": {
      "Description": "Administration Vpc Route Table Id for Private Subnets",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcName": {
      "Description": "name of the VPC",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcAvailabilityZone1": {
      "Description": "One of two Availability Zones that will be used to create subnets.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcAvailabilityZone2": {
      "Description": "One of two Availability Zones that will be used to create subnets.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcNetworkCIDR": {
      "Description": "VPC CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet1Name": {
      "Description": "Subnet name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet1CIDR": {
      "Description": "Subnet CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet2Name": {
      "Description": "Subnet name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet2CIDR": {
      "Description": "Subnet CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet3Name": {
      "Description": "Subnet name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet3CIDR": {
      "Description": "Subnet CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet4Name": {
      "Description": "Subnet name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet4CIDR": {
      "Description": "Subnet CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet5Name": {
      "Description": "Subnet name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet5CIDR": {
      "Description": "Subnet CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet6Name": {
      "Description": "Subnet name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet6CIDR": {
      "Description": "Subnet CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet7Name": {
      "Description": "Subnet name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet7CIDR": {
      "Description": "Subnet CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet8Name": {
      "Description": "Subnet name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VpcSubnet8CIDR": {
      "Description": "Subnet CidrBlock",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    }
  },

  "Resources": {

    "VpcScaffold" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Metadata" : { "Comment" : "Build VPC for an Environment"},
      "Properties" : {
        "TemplateURL" : 
            { "Fn::Join" : ["", ["http://", "s3.amazonaws.com/aip-devops-", 
            {"Ref" : "AWS::Region"}, "-", {"Ref" : "AWS::AccountId"}, { "Ref" : "VpcTemplateKey" }]]},
        "Parameters" : {
          "Environment" : { "Ref" : "Environment"},

          "VpcName" : { "Ref" : "VpcName"},
          "VpcAvailabilityZone1": { "Ref" : "VpcAvailabilityZone1" },
          "VpcAvailabilityZone2" : { "Ref" : "VpcAvailabilityZone2"},
          "VpcNetworkCIDR" : { "Ref" : "VpcNetworkCIDR"},
          "VpcSubnet1Name" : { "Ref" : "VpcSubnet1Name"},
          "VpcSubnet1CIDR" : { "Ref" : "VpcSubnet1CIDR"},
          "VpcSubnet2Name" : { "Ref" : "VpcSubnet2Name"},
          "VpcSubnet2CIDR" : { "Ref" : "VpcSubnet2CIDR"},
          "VpcSubnet3Name" : { "Ref" : "VpcSubnet3Name"},
          "VpcSubnet3CIDR" : { "Ref" : "VpcSubnet3CIDR"},
          "VpcSubnet4Name" : { "Ref" : "VpcSubnet4Name"},
          "VpcSubnet4CIDR" : { "Ref" : "VpcSubnet4CIDR"},
          "VpcSubnet5Name" : { "Ref" : "VpcSubnet5Name"},
          "VpcSubnet5CIDR" : { "Ref" : "VpcSubnet5CIDR"},
          "VpcSubnet6Name" : { "Ref" : "VpcSubnet6Name"},
          "VpcSubnet6CIDR" : { "Ref" : "VpcSubnet6CIDR"},
          "VpcSubnet7Name" : { "Ref" : "VpcSubnet7Name"},
          "VpcSubnet7CIDR" : { "Ref" : "VpcSubnet7CIDR"},
          "VpcSubnet8Name" : { "Ref" : "VpcSubnet8Name"},
          "VpcSubnet8CIDR" : { "Ref" : "VpcSubnet8CIDR"},

          "NatInstanceType" : { "Ref" : "NatInstanceType"},
          "NatImageId" : { "Ref" : "NatImageId"},
          "KeyName": { "Ref" : "KeyName" },

          "AdminVpcId" : { "Ref" : "AdminVpcId"},
          "AdminVpcCIDR" : { "Ref" : "AdminVpcCIDR"},
          "AdminVpcPrivateRouteTableId": { "Ref" : "AdminVpcPrivateRouteTableId" }
        }
      }


    },

    "RdsDatabase" : {
      "Type" : "AWS::CloudFormation::Stack",
      "DependsOn" : "BeanstalkApp1",
      "Metadata" : { "Comment" : "Build AWS Resources per Environment, e.g., S3, RDS" },
      "Properties" : {
        "TemplateURL" : 
            { "Fn::Join" : ["", ["http://", "s3.amazonaws.com/aip-devops-", 
            {"Ref" : "AWS::Region"}, "-", {"Ref" : "AWS::AccountId"}, { "Ref" : "DatabaseTemplateKey" }]]},
        "Parameters" : {
          "Environment"             : { "Ref" : "Environment" },
          "VpcId"                   : { "Fn::GetAtt" : ["VpcScaffold", "Outputs.VpcId"] },
          "DatabaseUser"            : { "Ref" : "DatabaseUser" },
          "DatabasePassword"        : { "Ref" : "DatabasePassword" },
          "DBAllocatedStorage"      : { "Ref" : "DBAllocatedStorage" },
          "DBInstanceClass"         : { "Ref" : "DBInstanceClass" },
          "WebSecurityGroup"        : { "Fn::GetAtt" : ["VpcScaffold", "Outputs.WebSecurityGroup"]},
          "AZforReplica1"           : { "Ref" : "AZforReplica1" },
          "AZforReplica2"           : { "Ref" : "AZforReplica2" },
          "DatabaseSubnet1"         : { "Fn::GetAtt" : ["VpcScaffold", "Outputs.DatabaseSubnet1"]},
          "DatabaseSubnet2"         : { "Fn::GetAtt" : ["VpcScaffold", "Outputs.DatabaseSubnet2"]}
        }
      }
    },

    "AppResources" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Metadata" : { "Comment" : "Build AWS Resources per Environment, e.g., S3, RDS" },
      "Properties" : {
        "TemplateURL" : 
            { "Fn::Join" : ["", ["http://", "s3.amazonaws.com/aip-devops-", 
            {"Ref" : "AWS::Region"}, "-", {"Ref" : "AWS::AccountId"}, { "Ref" : "ResourcesTemplateKey" }]]},
        "Parameters" : {
          "Environment": { "Ref" : "Environment" },
          "CWatchLogGrpName": { "Ref" : "CWatchLogGrpName" },
          "CWatchLogGrpRetention": { "Ref" : "CWatchLogGrpRetention" }
        }
      }
    },

    "BeanstalkApp1" : {
      "Type" : "AWS::CloudFormation::Stack",
      "DependsOn" : "VpcScaffold",
      "Metadata" : { "Comment" : "Beanstalk App - configure, build, deploy" },
      "Properties" : {
        "TemplateURL" :         
            { "Fn::Join" : ["", ["http://", "s3.amazonaws.com/aip-devops-", 
            {"Ref" : "AWS::Region"}, "-", {"Ref" : "AWS::AccountId"}, { "Ref" : "AppTemplateKey" }]]},
        "Parameters" : {
            "Environment"              : { "Ref" : "Environment"},

            "ImageId"                  : { "Ref" : "ImageId" },
            "KeyName"                  : { "Ref" : "KeyName" },
            "InstanceType"             : { "Ref" : "InstanceType" },
            "InstanceSecurityGroups"   : { "Fn::GetAtt" : ["VpcScaffold", "Outputs.WebSecurityGroup"] },

            "ApplicationName"          : { "Fn::Join": ["-", [{"Ref": "ApplicationName"}, {"Ref": "AWS::Region"}]]},
            "ApplicationURL"           : { "Fn::Join": ["-", [{"Ref": "ApplicationURL"}, {"Ref": "AWS::Region"}, {"Ref": "AWS::AccountId"}]]},
            "S3Bucket"                 : { "Fn::Join" : ["-", ["elasticbeanstalk", {"Ref" : "AWS::Region"}, {"Ref" : "AWS::AccountId"}]]},
            "S3Key"                    : { "Fn::Join" : ["", [{"Ref": "ApplicationName"}, "-", {"Ref": "AWS::Region"}, "/", {"Ref" : "S3Key"}]]},

            "VpcId"                    : { "Fn::GetAtt" : ["VpcScaffold", "Outputs.VpcId"] },
            "PrivateSubnets" : {
              "Fn::Join": [",", [{ "Fn::GetAtt" : ["VpcScaffold", "Outputs.WebSubnet1"]}, { "Fn::GetAtt" : ["VpcScaffold", "Outputs.WebSubnet2"]} ]] },
            "PublicSubnets" : {
              "Fn::Join": [",", [{ "Fn::GetAtt" : ["VpcScaffold", "Outputs.PublicSubnet1"]}, { "Fn::GetAtt" : ["VpcScaffold", "Outputs.PublicSubnet2"]} ]] }
          }
        }
      }
  },

  
  "Outputs": {
    "URL": {
      "Description": "URL of the AWS Elastic Beanstalk Environment",
      "Value": { "Fn::GetAtt": ["BeanstalkApp1", "Outputs.URL"] }
    }
  }
}